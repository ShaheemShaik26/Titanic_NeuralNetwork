{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12025270,"sourceType":"datasetVersion","datasetId":7565788}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shaheemshaik/titanic-nn?scriptVersionId=243053974\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T11:48:33.131177Z","iopub.execute_input":"2025-06-01T11:48:33.131438Z","iopub.status.idle":"2025-06-01T11:48:35.856548Z","shell.execute_reply.started":"2025-06-01T11:48:33.131411Z","shell.execute_reply":"2025-06-01T11:48:35.855198Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\n# Load data\ndata = pd.read_csv(\"/kaggle/input/titanic2/train.csv\")\n\n# Drop irrelevant columns\ndata = data.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)\n\n# Fill missing values\ndata['Age'] = data['Age'].fillna(data['Age'].median())\ndata['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])\n\n# Split features and label\nX = data.drop('Survived', axis=1)\ny = data['Survived']\n\n# One-hot encode categorical columns\nct = ColumnTransformer([\n    (\"encode\", OneHotEncoder(), ['Sex', 'Embarked', 'Pclass'])\n], remainder='passthrough')\n\nX = ct.fit_transform(X)\n\n# Scale numerical data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train/test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:05:46.696209Z","iopub.execute_input":"2025-06-01T12:05:46.696912Z","iopub.status.idle":"2025-06-01T12:05:46.722504Z","shell.execute_reply.started":"2025-06-01T12:05:46.696872Z","shell.execute_reply":"2025-06-01T12:05:46.721584Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(X_train.shape[1],), activation='relu'))\nmodel.add(Dense(17, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))  # Binary output\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train\nmodel.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:06:23.541169Z","iopub.execute_input":"2025-06-01T12:06:23.541449Z","iopub.status.idle":"2025-06-01T12:06:35.699447Z","shell.execute_reply.started":"2025-06-01T12:06:23.541429Z","shell.execute_reply":"2025-06-01T12:06:35.698556Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"loss, accuracy = model.evaluate(X_test, y_test)\nprint(\"Test Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:06:38.798872Z","iopub.execute_input":"2025-06-01T12:06:38.799176Z","iopub.status.idle":"2025-06-01T12:06:38.930463Z","shell.execute_reply.started":"2025-06-01T12:06:38.799153Z","shell.execute_reply":"2025-06-01T12:06:38.929197Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"loss, accuracy = model.evaluate(X_test, y_test)\nprint(f\"Test Loss: {loss:.4f}\")\nprint(f\"Test Accuracy: {accuracy:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:08:15.721393Z","iopub.execute_input":"2025-06-01T12:08:15.721674Z","iopub.status.idle":"2025-06-01T12:08:15.867042Z","shell.execute_reply.started":"2025-06-01T12:08:15.721656Z","shell.execute_reply":"2025-06-01T12:08:15.865879Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/titanic2/test.csv\")\npassenger_ids = test_data['PassengerId']\n\n# Same preprocessing as training data\ntest_data = test_data.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)\ntest_data['Age'] = test_data['Age'].fillna(data['Age'].median())\ntest_data['Fare'] = test_data['Fare'].fillna(data['Fare'].median())\ntest_data['Embarked'] = test_data['Embarked'].fillna(data['Embarked'].mode()[0])\n\nX_kaggle = ct.transform(test_data)\nX_kaggle = scaler.transform(X_kaggle)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:08:38.821554Z","iopub.execute_input":"2025-06-01T12:08:38.821964Z","iopub.status.idle":"2025-06-01T12:08:38.84681Z","shell.execute_reply.started":"2025-06-01T12:08:38.821942Z","shell.execute_reply":"2025-06-01T12:08:38.84551Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred = model.predict(X_kaggle)\ny_pred_binary = (y_pred > 0.5).astype(int).flatten()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:08:53.236237Z","iopub.execute_input":"2025-06-01T12:08:53.236514Z","iopub.status.idle":"2025-06-01T12:08:53.460302Z","shell.execute_reply.started":"2025-06-01T12:08:53.236496Z","shell.execute_reply":"2025-06-01T12:08:53.458111Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'PassengerId': passenger_ids,\n    'Survived': y_pred_binary\n})\nsubmission.to_csv(\"submission2.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:09:20.856053Z","iopub.execute_input":"2025-06-01T12:09:20.856366Z","iopub.status.idle":"2025-06-01T12:09:20.867551Z","shell.execute_reply.started":"2025-06-01T12:09:20.85633Z","shell.execute_reply":"2025-06-01T12:09:20.866326Z"}},"outputs":[],"execution_count":null}]}
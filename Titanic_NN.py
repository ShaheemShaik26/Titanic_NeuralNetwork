{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12025270,"sourceType":"datasetVersion","datasetId":7565788}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shaheemshaik/titanic-nn?scriptVersionId=243077204\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:22:35.125458Z","iopub.execute_input":"2025-06-01T14:22:35.125766Z","iopub.status.idle":"2025-06-01T14:22:36.680551Z","shell.execute_reply.started":"2025-06-01T14:22:35.125726Z","shell.execute_reply":"2025-06-01T14:22:36.679691Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic2/train.csv\n/kaggle/input/titanic2/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\n# Load training data\ntrain_data = pd.read_csv(\"/kaggle/input/titanic2/train.csv\")\n\n# Drop irrelevant columns\ntrain_data = train_data.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)\n\n# Fill missing values in training data\ntrain_data['Age'] = train_data['Age'].fillna(train_data['Age'].median())\ntrain_data['Embarked'] = train_data['Embarked'].fillna(train_data['Embarked'].mode()[0])\n\n# Separate features and label\nX_train = train_data.drop('Survived', axis=1)\ny_train = train_data['Survived']\n\n# One-hot encode categorical columns\nct = ColumnTransformer([\n    (\"encode\", OneHotEncoder(), ['Sex', 'Embarked', 'Pclass'])\n], remainder='passthrough')\n\n# Fit and transform training features\nX_train = ct.fit_transform(X_train)\n\n# Scale features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:26:28.714209Z","iopub.execute_input":"2025-06-01T14:26:28.714549Z","iopub.status.idle":"2025-06-01T14:26:28.736552Z","shell.execute_reply.started":"2025-06-01T14:26:28.714528Z","shell.execute_reply":"2025-06-01T14:26:28.735435Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(X_train.shape[1],), activation='relu'))\nmodel.add(Dense(17, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))  # Binary output\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train\nmodel.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:26:38.429249Z","iopub.execute_input":"2025-06-01T14:26:38.429841Z","iopub.status.idle":"2025-06-01T14:26:49.78172Z","shell.execute_reply.started":"2025-06-01T14:26:38.429817Z","shell.execute_reply":"2025-06-01T14:26:49.780984Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/50\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.5849 - loss: 0.7307 - val_accuracy: 0.7333 - val_loss: 0.5620\nEpoch 2/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7041 - loss: 0.5730 - val_accuracy: 0.7667 - val_loss: 0.4841\nEpoch 3/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7810 - loss: 0.5004 - val_accuracy: 0.8000 - val_loss: 0.4511\nEpoch 4/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7895 - loss: 0.4845 - val_accuracy: 0.8111 - val_loss: 0.4338\nEpoch 5/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8114 - loss: 0.4281 - val_accuracy: 0.8111 - val_loss: 0.4232\nEpoch 6/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7887 - loss: 0.4316 - val_accuracy: 0.8111 - val_loss: 0.4161\nEpoch 7/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7897 - loss: 0.4450 - val_accuracy: 0.8222 - val_loss: 0.4067\nEpoch 8/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8055 - loss: 0.4250 - val_accuracy: 0.8222 - val_loss: 0.4026\nEpoch 9/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8217 - loss: 0.4154 - val_accuracy: 0.8111 - val_loss: 0.3978\nEpoch 10/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8149 - loss: 0.4109 - val_accuracy: 0.8222 - val_loss: 0.3942\nEpoch 11/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8068 - loss: 0.4387 - val_accuracy: 0.8111 - val_loss: 0.3903\nEpoch 12/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8114 - loss: 0.4300 - val_accuracy: 0.8222 - val_loss: 0.3864\nEpoch 13/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8120 - loss: 0.4371 - val_accuracy: 0.8222 - val_loss: 0.3828\nEpoch 14/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8173 - loss: 0.4066 - val_accuracy: 0.8444 - val_loss: 0.3821\nEpoch 15/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8374 - loss: 0.3758 - val_accuracy: 0.8444 - val_loss: 0.3845\nEpoch 16/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8096 - loss: 0.4220 - val_accuracy: 0.8444 - val_loss: 0.3780\nEpoch 17/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8551 - loss: 0.3710 - val_accuracy: 0.8444 - val_loss: 0.3754\nEpoch 18/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8420 - loss: 0.3789 - val_accuracy: 0.8444 - val_loss: 0.3785\nEpoch 19/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8348 - loss: 0.3984 - val_accuracy: 0.8444 - val_loss: 0.3790\nEpoch 20/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8234 - loss: 0.3894 - val_accuracy: 0.8556 - val_loss: 0.3754\nEpoch 21/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8327 - loss: 0.3982 - val_accuracy: 0.8444 - val_loss: 0.3753\nEpoch 22/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8338 - loss: 0.3955 - val_accuracy: 0.8444 - val_loss: 0.3729\nEpoch 23/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8475 - loss: 0.3583 - val_accuracy: 0.8444 - val_loss: 0.3719\nEpoch 24/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8364 - loss: 0.3835 - val_accuracy: 0.8444 - val_loss: 0.3694\nEpoch 25/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8528 - loss: 0.3400 - val_accuracy: 0.8556 - val_loss: 0.3661\nEpoch 26/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8391 - loss: 0.3900 - val_accuracy: 0.8444 - val_loss: 0.3716\nEpoch 27/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8290 - loss: 0.3724 - val_accuracy: 0.8444 - val_loss: 0.3705\nEpoch 28/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8503 - loss: 0.3762 - val_accuracy: 0.8444 - val_loss: 0.3680\nEpoch 29/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8309 - loss: 0.4092 - val_accuracy: 0.8667 - val_loss: 0.3677\nEpoch 30/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8262 - loss: 0.3997 - val_accuracy: 0.8556 - val_loss: 0.3618\nEpoch 31/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8374 - loss: 0.3876 - val_accuracy: 0.8444 - val_loss: 0.3644\nEpoch 32/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8292 - loss: 0.4033 - val_accuracy: 0.8556 - val_loss: 0.3626\nEpoch 33/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8477 - loss: 0.3695 - val_accuracy: 0.8667 - val_loss: 0.3594\nEpoch 34/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8501 - loss: 0.3626 - val_accuracy: 0.8667 - val_loss: 0.3652\nEpoch 35/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8517 - loss: 0.3550 - val_accuracy: 0.8667 - val_loss: 0.3620\nEpoch 36/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8412 - loss: 0.3785 - val_accuracy: 0.8667 - val_loss: 0.3616\nEpoch 37/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8264 - loss: 0.3843 - val_accuracy: 0.8444 - val_loss: 0.3626\nEpoch 38/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8420 - loss: 0.3689 - val_accuracy: 0.8667 - val_loss: 0.3587\nEpoch 39/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8434 - loss: 0.3672 - val_accuracy: 0.8778 - val_loss: 0.3654\nEpoch 40/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8588 - loss: 0.3532 - val_accuracy: 0.8667 - val_loss: 0.3647\nEpoch 41/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8524 - loss: 0.3567 - val_accuracy: 0.8667 - val_loss: 0.3635\nEpoch 42/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8467 - loss: 0.3734 - val_accuracy: 0.8667 - val_loss: 0.3604\nEpoch 43/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8307 - loss: 0.3849 - val_accuracy: 0.8556 - val_loss: 0.3532\nEpoch 44/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8538 - loss: 0.3635 - val_accuracy: 0.8667 - val_loss: 0.3556\nEpoch 45/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8671 - loss: 0.3524 - val_accuracy: 0.8667 - val_loss: 0.3587\nEpoch 46/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8309 - loss: 0.3735 - val_accuracy: 0.8556 - val_loss: 0.3589\nEpoch 47/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8308 - loss: 0.3817 - val_accuracy: 0.8556 - val_loss: 0.3640\nEpoch 48/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8341 - loss: 0.3796 - val_accuracy: 0.8667 - val_loss: 0.3607\nEpoch 49/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8350 - loss: 0.3730 - val_accuracy: 0.8667 - val_loss: 0.3588\nEpoch 50/50\n\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8535 - loss: 0.3458 - val_accuracy: 0.8667 - val_loss: 0.3630\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x786c47e0d3d0>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"loss, accuracy = model.evaluate(X_train, y_train)\nprint(f\"Train Loss: {loss:.4f}\")\nprint(f\"Train Accuracy: {accuracy:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:28:00.859445Z","iopub.execute_input":"2025-06-01T14:28:00.860184Z","iopub.status.idle":"2025-06-01T14:28:01.003261Z","shell.execute_reply.started":"2025-06-01T14:28:00.860163Z","shell.execute_reply":"2025-06-01T14:28:01.00258Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m28/28\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8353 - loss: 0.3853 \nTrain Loss: 0.3648\nTrain Accuracy: 0.8474\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/titanic2/test.csv\")\npassenger_ids = test_data['PassengerId']\n\n# Drop irrelevant columns\ntest_data = test_data.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)\n\n# Fill missing values using training data stats\ntest_data['Age'] = test_data['Age'].fillna(data['Age'].median())\ntest_data['Fare'] = test_data['Fare'].fillna(data['Fare'].median())\n# Embarked is usually not missing in test, but just in case:\ntest_data['Embarked'] = test_data['Embarked'].fillna(data['Embarked'].mode()[0])\n\n# Transform using previously fitted transformers\nX_kaggle = ct.transform(test_data)\nX_kaggle = scaler.transform(X_kaggle)\n\n# Predict and convert to binary labels\ny_pred = model.predict(X_kaggle)\ny_pred_binary = (y_pred > 0.5).astype(int).flatten()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:29:04.343545Z","iopub.execute_input":"2025-06-01T14:29:04.343873Z","iopub.status.idle":"2025-06-01T14:29:04.472125Z","shell.execute_reply.started":"2025-06-01T14:29:04.343849Z","shell.execute_reply":"2025-06-01T14:29:04.471476Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step \n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'PassengerId': passenger_ids,\n    'Survived': y_pred_binary\n})\nsubmission.to_csv(\"submission_2.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T14:30:05.876687Z","iopub.execute_input":"2025-06-01T14:30:05.876986Z","iopub.status.idle":"2025-06-01T14:30:05.883609Z","shell.execute_reply.started":"2025-06-01T14:30:05.876965Z","shell.execute_reply":"2025-06-01T14:30:05.882711Z"}},"outputs":[],"execution_count":20}]}
